/*
 * Copyright 2018, Cypress Semiconductor Corporation or a subsidiary of 
 * Cypress Semiconductor Corporation. All Rights Reserved.
 * 
 * This software, associated documentation and materials ("Software"),
 * is owned by Cypress Semiconductor Corporation
 * or one of its subsidiaries ("Cypress") and is protected by and subject to
 * worldwide patent protection (United States and foreign),
 * United States copyright laws and international treaty provisions.
 * Therefore, you may use this Software only as provided in the license
 * agreement accompanying the software package from which you
 * obtained this Software ("EULA").
 * If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 * non-transferable license to copy, modify, and compile the Software
 * source code solely for use in connection with Cypress's
 * integrated circuit products. Any reproduction, modification, translation,
 * compilation, or representation of this Software except as specified
 * above is prohibited without the express written permission of Cypress.
 *
 * Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT, IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Cypress
 * reserves the right to make changes to the Software without notice. Cypress
 * does not assume any liability arising out of the application or use of the
 * Software or any product or circuit described in the Software. Cypress does
 * not authorize its products for use in any products where a malfunction or
 * failure of the Cypress product may reasonably be expected to result in
 * significant property damage, injury or death ("High Risk Product"). By
 * including Cypress's product in a High Risk Product, the manufacturer
 * of such system or application assumes all risk of such use and in doing
 * so agrees to indemnify Cypress against all liability.
 */

/*
 * This file has been automatically generated by the WICED Smart Ready Designer.
 * Definitions for constants used in the device's GATT database and function
 * prototypes.
 *
 */

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>

#define UUID_SERIAL_GATT_SERVICE        0x7e, 0x60, 0xfa, 0xf2, 0xbe, 0x7e, 0x3b, 0xa6, 0xe0, 0x47, 0x9d, 0x05, 0xb2, 0x93, 0x52, 0x69
#define UUID_SERIAL_GATT_SERIAL_DATA    0x8b, 0x5e, 0xfe, 0x3c, 0x2d, 0x90, 0x27, 0x87, 0xbc, 0x42, 0x00, 0xef, 0xe4, 0x46, 0x41, 0x61

// ***** Primary Service 'Generic Attribute'
#define HDLS_GENERIC_ATTRIBUTE                                                 0x0001

// ***** Primary Service 'Generic Access'
#define HDLS_GENERIC_ACCESS                                                    0x0014
// ----- Characteristic 'Device Name'
#define HDLC_GENERIC_ACCESS_DEVICE_NAME                                        0x0015
#define HDLC_GENERIC_ACCESS_DEVICE_NAME_VALUE                                  0x0016
// ----- Characteristic 'Appearance'
#define HDLC_GENERIC_ACCESS_APPEARANCE                                         0x0017
#define HDLC_GENERIC_ACCESS_APPEARANCE_VALUE                                   0x0018

// ***** Primary Service 'serial_gatt'
#define HDLS_SERIAL_GATT                                                       0x0028
// ----- Characteristic 'serial_data'
#define HDLC_SERIAL_GATT_SERIAL_DATA                                           0x0029
#define HDLC_SERIAL_GATT_SERIAL_DATA_VALUE                                     0x002A
// ===== Descriptor 'Client Configuration'
#define HDLD_SERIAL_GATT_SERIAL_DATA_CLIENT_CONFIGURATION                      0x002B

// ***** Primary Service 'Battery Service'
#define HDLS_BATTERY_SERVICE                                                   0x0070
// ----- Characteristic 'Battery Level'
#define HDLC_BATTERY_SERVICE_BATTERY_LEVEL                                     0x0071
#define HDLC_BATTERY_SERVICE_BATTERY_LEVEL_VALUE                               0x0072

// ***** Primary Service 'Device Information'
#define HDLS_DEVICE_INFORMATION                                                0x0080
// ----- Characteristic 'PnP ID'
#define HDLC_DEVICE_INFORMATION_PNP_ID                                         0x0081
#define HDLC_DEVICE_INFORMATION_PNP_ID_VALUE                                   0x0082
// ----- Characteristic 'Manufacturer Name String'
#define HDLC_DEVICE_INFORMATION_MANUFACTURER_NAME_STRING                       0x0083
#define HDLC_DEVICE_INFORMATION_MANUFACTURER_NAME_STRING_VALUE                 0x0084
// ----- Characteristic 'Model Number String'
#define HDLC_DEVICE_INFORMATION_MODEL_NUMBER_STRING                            0x0085
#define HDLC_DEVICE_INFORMATION_MODEL_NUMBER_STRING_VALUE                      0x0086
// ----- Characteristic 'Firmware Revision String'
#define HDLC_DEVICE_INFORMATION_FIRMWARE_REVISION_STRING                       0x0087
#define HDLC_DEVICE_INFORMATION_FIRMWARE_REVISION_STRING_VALUE                 0x0088
// ----- Characteristic 'Software Revision String'
#define HDLC_DEVICE_INFORMATION_SOFTWARE_REVISION_STRING                       0x0089
#define HDLC_DEVICE_INFORMATION_SOFTWARE_REVISION_STRING_VALUE                 0x008A

// External Lookup Table Entry
typedef struct
{
    uint16_t        handle;
    uint16_t        attr_len;
    void*           p_attr;
} attribute_t;

// External definitions

extern const uint8_t gatt_server_db[];
extern const uint16_t gatt_server_db_len;

extern const uint8_t gatt_server_db_appearance[];
extern const uint16_t gatt_server_db_appearance_len;

extern const uint8_t gatt_server_db_device_name[];
extern const uint16_t gatt_server_db_device_name_len;

extern attribute_t gatt_db_ext_attr_tbl[];
extern const uint16_t gatt_db_ext_attr_tbl_size;

extern char device_information_manufacturer_name_string[];
extern char device_information_model_number_string[];
extern char device_information_firmware_revision_string[];
extern char device_information_software_revision_string[];
extern uint8_t battery_service_battery_level;

#ifdef __cplusplus
}
#endif
